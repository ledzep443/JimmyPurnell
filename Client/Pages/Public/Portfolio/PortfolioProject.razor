@page "/portfolio/{CategoryName}/{ProjectName}"
@using Client.Components.Public.Shared

<Navbar />

<main class="container min-vh-90 py-5">
    @if (_category == null || _project == null)
    {
        <LoadingDot />
    }
    else
    {
        <div class="row">
            <div class="col-12 px-md-0">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb md-f-size-1-5">
                        <li class="breadcrumb-item"><a href="/portfolio">Portfolio</a></li>
                        <li class="breadcrumb-item"><a href="@($"/portfolio/{CategoryName}")">@_category.Name</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@_project.Name</li>
                    </ol>
                </nav>
            </div>

            <div class="col-12 shadow-no-hover py-5 px-md-5 mt-3">
                <article class="portfolio-project">
                    <h2 class="fst-italic">@_project.Name</h2>
                    <hr />
                    <img src=@($"{APIEndpoints.ServerBaseUrl}/{_project.ScreenshotImagePath}") class="img-responsive w-90" alt="Project screenshot" />
                    <div @ref="_quillJSReadOnlyEditorDiv" class="p-0 mt-5"></div>
                    <a href="@_project.GitHub" class="btn btn-large mx-5 bg-dark text-white mt-3 shadow">
                        <i class="fab fa-github-square"></i>Github repo
                    </a>
                    <a href="@_project.URL" class="btn btn-large mx-5 btn-primary mt-3 shadow">
                        <i class="fas fa-laptop-code"></i>Live demo
                    </a>
                </article>
            </div>
        </div>
    }
</main>

@code {
    [Parameter] public string CategoryName { get; set; }
    [Parameter] public string ProjectName { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }
    private ProjectCategory _category = null;
    private Project _project = null;
    private ElementReference _quillJSReadOnlyEditorDiv;
    private bool _loadingContent = false;
    protected override async Task OnParametersSetAsync()
    {
        _loadingContent = true;

        _category = await InMemoryDatabaseCache.GetProjectCategoryByCategoryName(CategoryName.ConvertUrlToTitle(), true, true);

        string projectNameFromURL = ProjectName.ConvertUrlToTitle();

        _project = _category.Projects.First(project => project.Name.ToLowerInvariant() == projectNameFromURL);

        StateHasChanged();

        await Task.Delay(500);

        await JsRuntime.InvokeVoidAsync("QuillFunctions.createQuill", _quillJSReadOnlyEditorDiv, false);

        if (string.IsNullOrEmpty(_project.Description) == false)
        {
            await JsRuntime.InvokeAsync<object>("QuillFunctions.setQuillContent", _quillJSReadOnlyEditorDiv, _project.Description);
        }

        await JsRuntime.InvokeAsync<object>("QuillFunctions.disableQuillEditor", _quillJSReadOnlyEditorDiv);

        _loadingContent = false;

        StateHasChanged();
    }
}
