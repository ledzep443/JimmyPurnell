// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220218181034_AddedSeedProjectsAndCategories")]
    partial class AddedSeedProjectsAndCategories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shared.Models.BlogCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("BlogCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "A description of category 1",
                            Name = "Category 1",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "A description of category 2",
                            Name = "Category 2",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "A description of category 3",
                            Name = "Category 3",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "A description of category 4",
                            Name = "Category 4",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "A description of category 5",
                            Name = "Category 5",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "A description of category 6",
                            Name = "Category 6",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        });
                });

            modelBuilder.Entity("Shared.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PublishDate")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Author = "Jimmy Purnell",
                            CategoryId = 1,
                            Content = "",
                            Excerpt = "This is the excerpt for post 1",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "First Post"
                        },
                        new
                        {
                            PostId = 2,
                            Author = "Jimmy Purnell",
                            CategoryId = 2,
                            Content = "",
                            Excerpt = "This is the excerpt for post 2",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Second Post"
                        },
                        new
                        {
                            PostId = 3,
                            Author = "Jimmy Purnell",
                            CategoryId = 3,
                            Content = "",
                            Excerpt = "This is the excerpt for post 3",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Third Post"
                        },
                        new
                        {
                            PostId = 4,
                            Author = "Jimmy Purnell",
                            CategoryId = 4,
                            Content = "",
                            Excerpt = "This is the excerpt for post 4",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Fourth Post"
                        },
                        new
                        {
                            PostId = 5,
                            Author = "Jimmy Purnell",
                            CategoryId = 5,
                            Content = "",
                            Excerpt = "This is the excerpt for post 5",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Fifth Post"
                        },
                        new
                        {
                            PostId = 6,
                            Author = "Jimmy Purnell",
                            CategoryId = 6,
                            Content = "",
                            Excerpt = "This is the excerpt for post 6",
                            PublishDate = "18/02/2022 06:10",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Sixth Post"
                        });
                });

            modelBuilder.Entity("Shared.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHub")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublishDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScreenshotImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This is the description for project 1",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "First project",
                            ProjectCategoryId = 1,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is the description for project 2",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "Second project",
                            ProjectCategoryId = 2,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This is the description for project 3",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "Thrid project",
                            ProjectCategoryId = 3,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        },
                        new
                        {
                            Id = 4,
                            Description = "This is the description for project 4",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "Fourth project",
                            ProjectCategoryId = 4,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        },
                        new
                        {
                            Id = 5,
                            Description = "This is the description for project 5",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "Fifth project",
                            ProjectCategoryId = 5,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        },
                        new
                        {
                            Id = 6,
                            Description = "This is the description for project 6",
                            GitHub = "/",
                            IsPublished = false,
                            Name = "Sixth project",
                            ProjectCategoryId = 6,
                            PublishDate = "18/02/2022 06:10",
                            ScreenshotImagePath = "uploads/placeholder.jpg",
                            URL = "/"
                        });
                });

            modelBuilder.Entity("Shared.Models.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectCategoryId");

                    b.ToTable("ProjectCategories");

                    b.HasData(
                        new
                        {
                            ProjectCategoryId = 1,
                            Description = "A description of category 1",
                            Name = "Category 1",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            ProjectCategoryId = 2,
                            Description = "A description of category 2",
                            Name = "Category 2",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            ProjectCategoryId = 3,
                            Description = "A description of category 3",
                            Name = "Category 3",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            ProjectCategoryId = 4,
                            Description = "A description of category 4",
                            Name = "Category 4",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            ProjectCategoryId = 5,
                            Description = "A description of category 5",
                            Name = "Category 5",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            ProjectCategoryId = 6,
                            Description = "A description of category 6",
                            Name = "Category 6",
                            ThumbnailImagePath = "uploads/placeholder.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.Post", b =>
                {
                    b.HasOne("Shared.Models.BlogCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.Project", b =>
                {
                    b.HasOne("Shared.Models.ProjectCategory", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.BlogCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Shared.Models.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
