@using Blazored.LocalStorage
@using Client.Providers
@using System.Net.Http.Headers
<div class="admin-area-sidebar bg-dark d-flex flex-column flex-shrink-0 p-3">
    <a href="/" class="btn bg-lightgray hover-bg-white text-dark my-4 shadow">
        <i class="fas fa-eye"></i><p class="md-and-smaller-d-none d-inline">Public site</p>    
    </a>

    <button @onclick="SignOut" class="btn bg-lightgray hover-bg-white text-dark shadow">
        <i class="fas fa-sign-out-alt"></i><p class="md-and-smaller-d-none d-inline">Sign out</p>
    </button>

    <hr class="my-4 text-white" />

    <ul class="nav-link nav-pills mb-auto">
        <li class="nav-item w-100">
            <a href="@AdminIndexPageUri" class="nav-link w-100 text-center shadow @(IsPageActive(AdminIndexPageUri) ? "active" : "text-white")">
                <i class="fas fa-home"></i><p class="md-and-smaller-d-none d-inline">Overview</p>
            </a>
        </li>
        <li class="nav-item w-100">
            <a href="@s_adminBlogCategoriesUri" class="nav-link w-100 text-center shadow @(IsPageActive(s_adminBlogCategoriesUri) ? "active" : "text-white")">
                <i class="fas fa-th"></i><p class="md-and-smaller-d-none d-inline">Blog Categories</p>
            </a>
        </li>
        <li class="nav-item w-100">
            <a href="@s_adminPostsPageUri" class="nav-link w-100 text-center shadow @(IsPageActive(s_adminPostsPageUri) ? "active" : "text-white")">
                <i class="fas fa-newspaper"></i><p class="md-and-smaller-d-none d-inline">Blog Posts</p>
            </a>
        </li>
        <li class="nav-item w-100">
            <a href="@s_adminProjectCategoriesUri" class="nav-link w-100 text-center shadow @(IsPageActive(s_adminProjectCategoriesUri) ? "active" : "text-white")">
                <i class="fas fa-th"></i><p class="md-and-smaller-d-none d-inline">Project Categories</p>
            </a>
        </li>
        <li class="nav-item w-100">
            <a href="@s_adminProjectsPageUri" class="nav-link w-100 text-center shadow @(IsPageActive(s_adminProjectsPageUri) ? "active" : "text-white")">
                <i class="fas fa-desktop"></i><p class="md-and-smaller-d-none d-inline">Projects</p>
            </a>
        </li>
    </ul>
</div>
@code {
    protected override async Task OnInitializedAsync() => await SignInWithBrowserLocalStorageBearerToken();

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    private async Task SignInWithBrowserLocalStorageBearerToken()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }

    private async Task SignOut()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");

            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();

            StateHasChanged();
        }
    }

    [Inject] NavigationManager NavigationManager { get; set; }
    private const string AdminIndexPageUri = "/admin";
    private static string s_adminBlogCategoriesUri = $"{AdminIndexPageUri}/blogcategories";
    private static string s_adminProjectCategoriesUri = $"{AdminIndexPageUri}/projectcategories";
    private static string s_adminPostsPageUri = $"{AdminIndexPageUri}/posts";
    private static string s_adminProjectsPageUri = $"{AdminIndexPageUri}/projects";
    private bool IsPageActive(string pageToCheckUri)
    {
        string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(2).ToArray();

        if (pageToCheckUri == AdminIndexPageUri)
        {
            if (currentUriSplitBetweenSlashes.Last() == "admin")
            {
                return true;
            }
        }
        else
        {
            string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(2).ToArray();

            foreach (string currentUriPart in currentUriSplitBetweenSlashes)
            {
                foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
                {
                    if (pageToCheckUriPart == currentUriPart)
                    {
                        return true;
                    }
                }
            }
        }
        //If the code reaches here, pageToCheckUri is not the active page, so return false.
        return false;
    }
}
