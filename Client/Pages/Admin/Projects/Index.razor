@page "/admin/projects"
@using System.Net;

<AuthorizeView>
    <Authorized Context="Auth">
        <main class="admin-area-main">
            <Client.Components.Admin.Sidebar />

            <div class="admin-area-main container-fluid bg-white">
                <div class="row g-0">
                    <div class="col">
                        <h1>Projects</h1>
                        <br />
                        <hr />
                        <br />

                        @if (InMemoryDatabaseCache.Projects == null || _attemptingToDeleteAProject == true)
                        {
                            <LoadingDot />
                        }
                        else
                        {
                            <a href="/admin/projects/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                                <i class="fas fa-plus"></i> Create project    
                            </a>

                            <button @onclick="() => InMemoryDatabaseCache.GetProjectsFromDatabaseAndCache()" class="btn btn-primary shadow md-f-size-1-5">
                                <i class="fas fa-sync"></i> Refresh data
                            </button>

                            <br />
                            <br />
                            <br />

                            @if (InMemoryDatabaseCache.Projects.Count < 1)
                            {
                                <h1>No projects found. Please create one.</h1>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-sm">
                                        <thead>
                                            <tr>
                                                <th scope="col">Category</th>
                                                <th scope="col">Screenshot</th>
                                                <th scope="col">Name</th>
                                                <th scope="col">Description</th>
                                                <th scope="col">GitHub</th>
                                                <th scope="col">URL</th>
                                                <th scope="col">Publish Date</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var project in InMemoryDatabaseCache.Projects)
                                            {
                                                <tr>
                                                    <th class="w-8" scope="row">
                                                        <p>@project.Category.Name</p>
                                                    </th>
                                                    <td class="w-35">
                                                        <img src="@($"{APIEndpoints.ServerBaseUrl}/{project.ScreenshotImagePath}")" class="admin-index-thumbnail-image" alt="Project screenshot thumbnail" />
                                                    </td>
                                                    <td class="w-8">
                                                        <p>@project.Name</p>
                                                    </td>
                                                    <td class="w-14">
                                                        <p>@project.Description</p>
                                                    </td>
                                                    <td class="w-8">
                                                        <p>@project.GitHub</p>
                                                    </td>
                                                    <td class="w-14">
                                                        <p>@project.URL</p>
                                                    </td>
                                                    <td class="w-14">
                                                        <p>@(project.IsPublished ? $"{project.PublishDate} UTC" : "Not published")</p>
                                                    </td>
                                                    <td class="w-14">
                                                        <div class="d-flex flex-column">
                                                            @if (project.IsPublished == false)
                                                            {
                                                                <button @onclick="() => PublishOrUnpublishProject(project)" class="btn btn-success shadow md-f-size-1-5">
                                                                    <i class="fas fa-eye"></i> Publish
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button @onclick="() => PublishOrUnpublishProject(project)" class="btn btn-secondary shadow md-f-size-1-5">
                                                                    <i class="fas fa-eye-slash"></i> Unpublish
                                                                </button>
                                                            }

                                                            <br />

                                                            <a href="/admin/projects/update/@project.Id" class="btn btn-update shadow md-f-size-1-5">
                                                                <i class="fas fa-edit"></i> Update    
                                                            </a>

                                                            <br />

                                                            <button @onclick="(() => DeleteProject(project))" class="btn btn-danger shadow md-f-size-1-5">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }

                        <div class="position-fixed bottom-0 end-5 z-index-5">

                            @if (_successfullyDeletedAProject == true)
                            {
                                <Toast IsError="false" ToastTitle="Successfully deleted a project."
                                ToastBody="The project has been removed from the database."
                                ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedAProject = false" />
                            }

                            @if (_unsuccessfullyTriedToDeleteAProject == true)
                            {
                                <Toast IsError="true" ToastTitle="Delete failed."
                                ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeleteAProject}\" Please try again and if the issue persists contact the administrator.")"
                                ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToDeleteAProject = false" />
                            }

                            @if (_successfullyPublishedOrUnpublished == true)
                            {
                                <Toast IsError="false" ToastTitle="@($"{(_lastPublishedOrUnpublishedProject.IsPublished ? "Publish" : "Unpublish")} successful.")"
                                ToastBody="@($"{(_lastPublishedOrUnpublishedProject.IsPublished ? "The project is now visible on the public site." : "The project is no longer visible on the public site.")}")"
                                ParentMethodToCallOnClickBtnClose="() => _successfullyPublishedOrUnpublished = false" />
                            }

                            @if (_unsuccessfullyTriedToPublishOrUnpublish == true)
                            {
                                <Toast IsError="true" ToastTitle="Publish or unpublish failed."
                                ToastBody="Something went wrong when communicating with the server. Please try again and if the issue persists contact the administrator."
                                ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToPublishOrUnpublish = false" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </Authorized>
    <NotAuthorized>
        <Client.Components.Admin.SignIn />
    </NotAuthorized>
</AuthorizeView>
 
@implements IDisposable
@code {
                                [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    protected override async Task OnInitializedAsync()
    {
                                InMemoryDatabaseCache.OnProjectDataChanged += StateHasChanged;

                                if (InMemoryDatabaseCache.Projects == null)
                                {
                                    await InMemoryDatabaseCache.GetProjectsFromDatabaseAndCache();
                                }
    }

    public void Dispose() => InMemoryDatabaseCache.OnProjectDataChanged -= StateHasChanged;

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemptingToDeleteAProject = false;
    private bool _successfullyDeletedAProject = false;
    private bool _unsuccessfullyTriedToDeleteAProject = false;
    private string _reasonUnsuccessfullyTriedToDeleteAProject = null;
    private async void DeleteProject(Project projectToDelete)
    {
                                _attemptingToDeleteAProject = true;

                                HttpResponseMessage response = await HttpClient.DeleteAsync($"{APIEndpoints.s_projects}/{projectToDelete.Id}");

                                if (response.StatusCode == HttpStatusCode.NoContent)
                                {
                                    if (InMemoryDatabaseCache.Projects.Remove(projectToDelete))
                                    {
                                        _successfullyDeletedAProject = true;
                                    }
                                    else
                                    {
                                        _reasonUnsuccessfullyTriedToDeleteAProject = "An unexpected error has occurred. Please try again and if the issue persists please contact the administrator.";
                                        _unsuccessfullyTriedToDeleteAProject = true;
                                    }
                                }
                                else
                                {
                                    _reasonUnsuccessfullyTriedToDeleteAProject = $"The API didn't return a NoContent Http status code. Instead the API returned the status code {response.StatusCode} and gave the following reason for failure {response.ReasonPhrase}.";
                                    _unsuccessfullyTriedToDeleteAProject = true;
                                }

                                _attemptingToDeleteAProject = false;
                                StateHasChanged();
    }

    private bool _successfullyPublishedOrUnpublished = false;
    private bool _unsuccessfullyTriedToPublishOrUnpublish = false;
    private Project _lastPublishedOrUnpublishedProject = null;
    private async Task PublishOrUnpublishProject(Project projectToPublishOrUnpublish)
    {
                                projectToPublishOrUnpublish.IsPublished = !projectToPublishOrUnpublish.IsPublished;

                                HttpResponseMessage response = await HttpClient.PutAsJsonAsync<Project>($"{APIEndpoints.s_projects}/{projectToPublishOrUnpublish.Id}", projectToPublishOrUnpublish);

                                if (response.StatusCode == HttpStatusCode.Created)
                                {
                                    Project updatedProject = await response.Content.ReadFromJsonAsync<Project>();

                                    _lastPublishedOrUnpublishedProject = updatedProject;

                                    Project uneditedProjectInList = await InMemoryDatabaseCache.GetProjectByProjectId(projectToPublishOrUnpublish.Id);
                                    uneditedProjectInList.IsPublished = updatedProject.IsPublished;
                                    uneditedProjectInList.PublishDate = updatedProject.PublishDate;

                                    _successfullyPublishedOrUnpublished = true;
                                }
                                else
                                {
                                    _unsuccessfullyTriedToPublishOrUnpublish = true;
                                }

    }
}
